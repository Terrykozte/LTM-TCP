Apr 07, 2025 10:11:17 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:500)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:496)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 07, 2025 10:11:38 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:500)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:496)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 07, 2025 10:11:48 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 07, 2025 10:14:00 PM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 07, 2025 10:14:49 PM chatclient.ChatClient$MessageReader run
INFO: Message received from Tai
Apr 07, 2025 10:14:57 PM chatclient.ChatClient sendMessage
INFO: Message sent: he
Apr 07, 2025 10:22:28 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 07, 2025 10:23:21 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 07, 2025 10:23:32 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdsad
Apr 07, 2025 10:23:46 PM chatclient.ChatClient sendMessage
INFO: Message sent: hhee
Apr 07, 2025 10:24:20 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 07, 2025 10:26:52 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 07, 2025 10:27:18 PM chatclient.ChatClient sendMessage
INFO: Message sent: assssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssssassssssssssssssssssssssssssssssssssssss
Apr 07, 2025 10:28:26 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 07, 2025 10:48:00 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 07, 2025 10:48:04 PM chatclient.ChatClient sendMessage
INFO: Message sent: hhehe
Apr 07, 2025 10:48:06 PM chatclient.ChatClient sendMessage
INFO: Message sent: ashdashd
Apr 07, 2025 10:48:12 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 07, 2025 10:48:22 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 07, 2025 10:48:31 PM chatclient.ChatClient sendMessage
INFO: Message sent: He
Apr 07, 2025 10:48:36 PM chatclient.ChatClient sendMessage
INFO: Message sent: he  he
Apr 07, 2025 10:48:43 PM chatclient.ChatClient sendMessage
INFO: Message sent: e
Apr 07, 2025 10:48:46 PM chatclient.ChatClient sendMessage
INFO: Message sent: ea
Apr 07, 2025 10:48:46 PM chatclient.ChatClient sendMessage
INFO: Message sent: as
Apr 07, 2025 10:48:47 PM chatclient.ChatClient sendMessage
INFO: Message sent: da
Apr 07, 2025 10:48:49 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdae
Apr 07, 2025 10:51:57 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:586)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:582)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 08, 2025 3:46:26 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 08, 2025 3:46:39 PM chatclient.ChatClient sendMessage
INFO: Message sent: !
Apr 08, 2025 3:46:40 PM chatclient.ChatClient sendMessage
INFO: Message sent: ad
Apr 08, 2025 3:46:40 PM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 08, 2025 3:46:41 PM chatclient.ChatClient sendMessage
INFO: Message sent: aasddad
Apr 08, 2025 3:46:52 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 12, 2025 10:53:22 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 12, 2025 10:53:31 AM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdas
Apr 12, 2025 10:53:31 AM chatclient.ChatClient sendMessage
INFO: Message sent: as
Apr 12, 2025 10:53:31 AM chatclient.ChatClient sendMessage
INFO: Message sent: d
Apr 12, 2025 10:53:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 12, 2025 10:53:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: as
Apr 12, 2025 10:53:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: srr
Apr 12, 2025 10:53:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: h
Apr 12, 2025 10:53:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: ddf
Apr 14, 2025 1:02:26 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 14, 2025 1:03:10 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 1:03:22 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 14, 2025 1:10:36 PM chatclient.ChatClient sendMessage
INFO: Message sent: sdad
Apr 14, 2025 1:10:38 PM chatclient.ChatClient sendMessage
INFO: Message sent: aseeeeeeeeeeeeeeeeeeeeee
Apr 14, 2025 1:10:47 PM chatclient.ChatClient sendMessage
INFO: Message sent: qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
Apr 14, 2025 1:10:50 PM chatclient.ChatClient sendMessage
INFO: Message sent: qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
Apr 14, 2025 1:15:53 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 1:21:37 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:533)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:530)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 14, 2025 1:22:11 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 14, 2025 1:22:14 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdasssssssssssssssssssssss
Apr 14, 2025 1:22:48 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 14, 2025 1:26:56 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdsadas
Apr 14, 2025 1:27:03 PM chatclient.ChatClient sendMessage
INFO: Message sent: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Apr 14, 2025 1:31:19 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 1:35:02 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Viet
Apr 14, 2025 1:35:07 PM chatclient.ChatClient sendMessage
INFO: Message sent: asee
Apr 14, 2025 1:35:09 PM chatclient.ChatClient sendMessage
INFO: Message sent: aeawe
Apr 14, 2025 1:35:15 PM chatclient.ChatClient sendMessage
INFO: Message sent: aweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweaweawe
Apr 14, 2025 1:35:53 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 1:38:08 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Viet
Apr 14, 2025 1:39:22 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 1:40:48 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Viet
Apr 14, 2025 1:47:00 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 14, 2025 2:27:01 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:542)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:539)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 15, 2025 9:07:47 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:542)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:539)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 15, 2025 9:07:56 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 15, 2025 9:07:59 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasda
Apr 15, 2025 9:16:34 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 15, 2025 9:25:17 PM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:543)
	at chatclient.ChatClientGUI$3.doInBackground(ChatClientGUI.java:540)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 15, 2025 9:25:21 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 15, 2025 9:25:41 PM chatclient.ChatClient sendMessage
INFO: Message sent: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Apr 15, 2025 9:25:54 PM chatclient.ChatClient sendMessage
INFO: Message sent: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Apr 15, 2025 9:26:56 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 15, 2025 9:27:40 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 15, 2025 9:32:43 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 15, 2025 9:32:55 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 15, 2025 9:33:03 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasdasdadasd
Apr 15, 2025 9:33:14 PM chatclient.ChatClient sendMessage
INFO: Message sent: sao kì v
Apr 15, 2025 9:36:17 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 15, 2025 9:47:29 PM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 15, 2025 9:47:35 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd
Apr 15, 2025 9:47:42 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdasdasdasdasdasdasdasdasdasdasdasdasdasd
Apr 15, 2025 9:47:49 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd
Apr 15, 2025 9:47:53 PM chatclient.ChatClient sendMessage
INFO: Message sent: asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd
Apr 15, 2025 9:54:58 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 1:35:55 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 1:36:07 AM chatclient.ChatClient sendMessage
INFO: Message sent: test thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thửtest thử
Apr 16, 2025 1:36:14 AM chatclient.ChatClient sendMessage
INFO: Message sent: nicec
Apr 16, 2025 1:47:27 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 1:47:43 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:00:34 AM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:25)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:625)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:622)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 2:02:45 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:03:05 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7983.PNG
Apr 16, 2025 2:03:05 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: chatclient.ChatClientGUI.getUsername
	at chatclient.ChatClient.sendFile(ChatClient.java:72)
	at chatclient.ChatClientGUI.lambda$showFileTypeMenu$10(ChatClientGUI.java:1180)
	at chatclient.ChatClientGUI$$Lambda$46/51386719.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.AbstractButton.doClick(AbstractButton.java:376)
	at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:833)
	at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:877)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 2:05:53 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\Screenshot 2023-12-19 015740.png
Apr 16, 2025 2:05:53 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: chatclient.ChatClientGUI.getUsername
	at chatclient.ChatClient.sendFile(ChatClient.java:72)
	at chatclient.ChatClientGUI.lambda$showFileTypeMenu$14(ChatClientGUI.java:1208)
	at chatclient.ChatClientGUI$$Lambda$50/1293451439.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.AbstractButton.doClick(AbstractButton.java:376)
	at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:833)
	at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:877)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 2:30:50 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 2:32:21 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:33:44 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 2:33:49 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:34:13 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7698.PNG
Apr 16, 2025 2:34:13 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: chatclient.ChatClientGUI.getUsername
	at chatclient.ChatClient.sendFile(ChatClient.java:72)
	at chatclient.ChatClientGUI.lambda$createChatPanel$8(ChatClientGUI.java:1318)
	at chatclient.ChatClientGUI$$Lambda$31/1160943610.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 2:37:22 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 2:37:31 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:38:11 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: C:\Users\Terrykote\OneDrive\Documents\test.docx
Apr 16, 2025 2:38:11 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: chatclient.ChatClientGUI.getUsername
	at chatclient.ChatClient.sendFile(ChatClient.java:72)
	at chatclient.ChatClientGUI.lambda$createChatPanel$8(ChatClientGUI.java:1318)
	at chatclient.ChatClientGUI$$Lambda$31/684559690.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 2:47:27 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 2:47:36 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 2:48:04 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: C:\Users\Terrykote\OneDrive\Documents\test.docx
Apr 16, 2025 2:48:04 AM chatclient.ChatClient sendFile
INFO: File sending initiated: test.docx (13.19 KB)
Apr 16, 2025 2:48:46 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7559.HEIC
Apr 16, 2025 2:48:46 AM chatclient.ChatClient sendFile
INFO: File sending initiated: IMG_7559.HEIC (1.32 MB)
Apr 16, 2025 2:50:03 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvv
Apr 16, 2025 2:50:16 AM chatclient.ChatClient sendMessage
INFO: Message sent: tesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửtesr thửv
Apr 16, 2025 3:06:57 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:07:12 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:07:56 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:08:34 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:13:15 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:13:22 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:16:13 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:16:20 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:17:19 AM chatclient.ChatClient sendMessage
INFO: Message sent: TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestvv
Apr 16, 2025 3:17:29 AM chatclient.ChatClient sendMessage
INFO: Message sent: TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest
Apr 16, 2025 3:17:43 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7977.PNG
Apr 16, 2025 3:17:43 AM chatclient.ChatClient sendFile
INFO: File sending initiated: IMG_7977.PNG (1.50 MB)
Apr 16, 2025 3:20:28 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:22:35 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:22:44 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestv
Apr 16, 2025 3:22:56 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Apr 16, 2025 3:24:02 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:24:06 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:24:14 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Apr 16, 2025 3:24:22 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:24:31 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:24:41 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Apr 16, 2025 3:25:02 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7698.PNG
Apr 16, 2025 3:25:02 AM chatclient.ChatClient sendFile
INFO: File sending initiated: IMG_7698.PNG (1.86 MB)
Apr 16, 2025 3:25:45 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:35:00 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:35:08 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvv
Apr 16, 2025 3:35:13 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:35:45 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:35:51 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvv
Apr 16, 2025 3:35:55 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:45:42 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:45:54 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestv
Apr 16, 2025 3:46:02 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Apr 16, 2025 3:46:16 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:46:28 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 3:47:01 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - formatFileSize(long) has private access in chatclient.FileTransferHandler
	at chatclient.ChatClient.sendFile(ChatClient.java:66)
	at chatclient.ChatClientGUI.lambda$sendFile$13(ChatClientGUI.java:1501)
	at chatclient.ChatClientGUI$$Lambda$49/1047277716.run(Unknown Source)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 4:08:13 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 4:08:24 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7559.HEIC
Apr 16, 2025 4:08:24 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: SwingUtilities.invokeLater
	at chatclient.ChatClient.sendFile(ChatClient.java:96)
	at chatclient.ChatClientGUI.lambda$createChatPanel$8(ChatClientGUI.java:1335)
	at chatclient.ChatClientGUI$$Lambda$31/1958469628.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 4:08:40 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7538.PNG
Apr 16, 2025 4:08:40 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.lang.RuntimeException: Uncompilable source code - Erroneous sym type: SwingUtilities.invokeLater
	at chatclient.ChatClient.sendFile(ChatClient.java:96)
	at chatclient.ChatClientGUI.lambda$createChatPanel$8(ChatClientGUI.java:1335)
	at chatclient.ChatClientGUI$$Lambda$31/1958469628.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 4:09:52 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 4:10:22 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 4:10:30 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7538.PNG
Apr 16, 2025 4:11:05 AM chatclient.ChatClient sendFile
SEVERE: Error sending file
java.net.SocketException: Connection reset by peer: socket write error
	at java.net.SocketOutputStream.socketWrite0(Native Method)
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109)
	at java.net.SocketOutputStream.write(SocketOutputStream.java:153)
	at java.io.DataOutputStream.write(DataOutputStream.java:107)
	at chatclient.ChatClient.sendFile(ChatClient.java:91)
	at chatclient.ChatClientGUI.lambda$createChatPanel$8(ChatClientGUI.java:1335)
	at chatclient.ChatClientGUI$$Lambda$31/55355072.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 4:11:05 AM chatclient.ChatClient$MessageReader run
SEVERE: Lost connection to server
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:209)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$MessageReader.run(ChatClient.java:185)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 4:11:38 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 4:11:50 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7559.HEIC
Apr 16, 2025 4:38:09 AM chatclient.ChatClient connect
SEVERE: Cannot connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:30)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:825)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:822)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 5:03:34 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 5:03:48 AM chatclient.ChatClient sendMessage
INFO: Message sent: TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestv
Apr 16, 2025 5:03:56 AM chatclient.ChatClient sendMessage
INFO: Message sent: TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest
Apr 16, 2025 5:05:26 AM chatclient.ChatClient sendMessage
INFO: Message sent: as
Apr 16, 2025 5:05:26 AM chatclient.ChatClient sendMessage
INFO: Message sent: das
Apr 16, 2025 5:05:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: das
Apr 16, 2025 5:05:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: dsa
Apr 16, 2025 5:05:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: daas
Apr 16, 2025 5:05:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: das
Apr 16, 2025 5:05:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 5:05:29 AM chatclient.ChatClient sendMessage
INFO: Message sent: apackage chatclient;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.*;
import java.util.regex.Pattern;

public class ChatClientGUI extends JFrame {
    private JTextField tfServerIP, tfPort;
    private JTextArea taMessage;
    private JTextField tfUsername;
    private JPasswordField pfPassword, pfPasswordConfirm;
    private JTextPane tpChat;
    private JButton btnLogin, btnRegister, btnSwitchToRegister, btnSwitchToLogin, btnDisconnect, btnSend;
    private JButton btnAttachment;
    private JToggleButton btnShowPassword, btnShowPasswordConfirm;
    private JPanel loginPanel, registerPanel, chatPanel;
    private ChatClient client;
    private boolean isConnected = false;
    private static int clientCounter = 0;
    private static final Logger logger = Logger.getLogger(ChatClientGUI.class.getName());
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JLabel lblUserInfo, lblServerInfo, lblPortInfo, lblOnlineUsers;
    private LoginRegisterManager loginManager;
    private FileTransferHandler fileHandler;
    private List<String> onlineUsers = new ArrayList<>();
    private JPanel userListPanel;
    private JLabel passwordStrengthLabel;
    private JProgressBar passwordStrengthBar;
    private Map<String, Integer> fileProgressMap = new HashMap<>();
    
    private StyledDocument chatDocument;
    private Style systemStyle, myMessageStyle, otherMessageStyle, joinLeaveStyle;

    private final Color PRIMARY_COLOR = new Color(0, 132, 255);
    private final Color PRIMARY_DARK_COLOR = new Color(0, 102, 204);
    private final Color ACCENT_COLOR = new Color(255, 64, 129);
    private final Color ACCENT_DARK_COLOR = new Color(200, 30, 85);
    private final Color SUCCESS_COLOR = new Color(76, 175, 80);
    private final Color WARNING_COLOR = new Color(255, 152, 0);
    private final Color ERROR_COLOR = new Color(244, 67, 54);
    private final Color BACKGROUND_COLOR = new Color(245, 246, 247);
    private final Color TEXT_COLOR = new Color(33, 33, 33);
    private final Color LIGHT_TEXT = new Color(255, 255, 255);
    private final Color CHAT_BG = new Color(237, 241, 247);
    private final Color MY_MESSAGE_BG = new Color(0, 132, 255);
    private final Color OTHER_MESSAGE_BG = new Color(241, 241, 242);
    private final Color SYSTEM_MESSAGE_COLOR = new Color(117, 117, 117);
    private final Color JOIN_COLOR = new Color(76, 175, 80);
    private final Color LEAVE_COLOR = new Color(239, 83, 80);
    private final Color ATTACHMENT_COLOR = new Color(33, 150, 243);

    private final Font HEADER_FONT = new Font("Segoe UI", Font.BOLD, 26);
    private final Font SUB_HEADER_FONT = new Font("Segoe UI", Font.BOLD, 16);
    private final Font NORMAL_FONT = new Font("Segoe UI", Font.PLAIN, 14);
    private final Font BUTTON_FONT = new Font("Segoe UI", Font.BOLD, 14);
    private final Font SMALL_FONT = new Font("Segoe UI", Font.PLAIN, 12);
    private final Font CHAT_FONT = new Font("Segoe UI", Font.PLAIN, 14);
    
    private ImageIcon sendIcon;
    private ImageIcon attachmentIcon;
    private ImageIcon loginIcon;
    private ImageIcon registerIcon;
    private ImageIcon disconnectIcon;
    private ImageIcon appIcon;
    private ImageIcon logoIcon;
    private ImageIcon avatarIcon;
    private ImageIcon userListIcon;
    private ImageIcon showPasswordIcon;
    private ImageIcon hidePasswordIcon;
    private ImageIcon audioIcon;
    private ImageIcon videoIcon;
    private ImageIcon fileIcon;
    private ImageIcon imageIcon;
    private ImageIcon documentIcon;

    private final Pattern PASSWORD_PATTERN = Pattern.compile(
            "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()\\-+=])(?=\\S+$).{8,}$");
    
    private final int MAX_CHARS_PER_LINE = 70;
    private final int CHAT_PANEL_WIDTH = 650;
    private final int USER_PANEL_WIDTH = 300;
    private final int INPUT_PANEL_HEIGHT = 120;

public ChatClientGUI() {
    client = new ChatClient(this);
    loginManager = new LoginRegisterManager();
    fileHandler = new FileTransferHandler(this);
    clientCounter++;
    loadIcons();  // Chỉ tạo các icon trống
    setLookAndFeel();
    initComponents();
    setupLogger();
}
    
    public String getUsername() {
        return lblUserInfo.getText();
    }
    
 private void loadIcons() {
    // Đơn giản hóa bằng cách chỉ tạo các ImageIcon trống
    sendIcon = new ImageIcon();
    loginIcon = new ImageIcon();
    registerIcon = new ImageIcon();
    disconnectIcon = new ImageIcon();
    appIcon = new ImageIcon();
    logoIcon = new ImageIcon();
    avatarIcon = new ImageIcon();
    attachmentIcon = new ImageIcon();
    userListIcon = new ImageIcon();
    showPasswordIcon = new ImageIcon();
    hidePasswordIcon = new ImageIcon();
    audioIcon = new ImageIcon();
    videoIcon = new ImageIcon();
    fileIcon = new ImageIcon();
    imageIcon = new ImageIcon();
    documentIcon = new ImageIcon();
}
    
    private void createPlaceholderIcons() {
        sendIcon = new ImageIcon(createSendIcon(24, 24, COLOR_LIGHT_TEXT));
        loginIcon = new ImageIcon(createLoginIcon(20, 20, COLOR_LIGHT_TEXT));
        registerIcon = new ImageIcon(createRegisterIcon(20, 20, COLOR_LIGHT_TEXT));
        disconnectIcon = new ImageIcon(createLogoutIcon(20, 20, COLOR_LIGHT_TEXT));
        appIcon = new ImageIcon(createChatIcon(32, 32, PRIMARY_COLOR));
        logoIcon = new ImageIcon(createLogoIcon(120, 120, PRIMARY_COLOR));
        avatarIcon = new ImageIcon(createAvatarIcon(32, 32, new Color(158, 158, 158)));
        attachmentIcon = new ImageIcon(createAttachmentIcon(24, 24, COLOR_LIGHT_TEXT));
        userListIcon = new ImageIcon(createUserListIcon(24, 24, COLOR_LIGHT_TEXT));
        showPasswordIcon = new ImageIcon(createEyeIcon(20, 20, true));
        hidePasswordIcon = new ImageIcon(createEyeIcon(20, 20, false));
        audioIcon = new ImageIcon(createAudioIcon(24, 24, new Color(33, 150, 243)));
        videoIcon = new ImageIcon(createVideoIcon(24, 24, new Color(244, 67, 54)));
        fileIcon = new ImageIcon(createFileIcon(24, 24, new Color(158, 158, 158)));
        imageIcon = new ImageIcon(createImageIcon(24, 24, new Color(76, 175, 80)));
        documentIcon = new ImageIcon(createDocumentIcon(24, 24, new Color(255, 152, 0)));
    }

    private Image createSendIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        int[] xPoints = {2, width-4, 2};
        int[] yPoints = {4, height/2, height-4};
        g2d.fillPolygon(xPoints, yPoints, 3);
        
        g2d.dispose();
        return image;
    }

    private Image createLoginIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawRect(width/4, 2, width/2, height-4);
        g2d.drawLine(2, height/2, width/2, height/2);
        g2d.fillPolygon(
            new int[]{width/2-2, width/2-6, width/2-6}, 
            new int[]{height/2, height/2-4, height/2+4}, 
            3);
        
        g2d.dispose();
        return image;
    }

    private Image createRegisterIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillOval(width/4, 2, width/2, height/2);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawLine(width/2, height/2+2, width/2, height-2);
        g2d.drawLine(width/3, height*3/4, width*2/3, height*3/4);
        
        g2d.dispose();
        return image;
    }

    private Image createLogoutIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawRect(width/4, 2, width/2, height-4);
        g2d.drawLine(width*3/4, height/2, width-2, height/2);
        g2d.fillPolygon(
            new int[]{width-2, width-6, width-6}, 
            new int[]{height/2, height/2-4, height/2+4}, 
            3);
        
        g2d.dispose();
        return image;
    }

    private Image createChatIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRoundRect(2, 2, width-8, height-8, 10, 10);
        g2d.fillPolygon(
            new int[]{width-10, width-2, width-15}, 
            new int[]{height-8, height-2, height-2}, 
            3);
        
        g2d.setColor(Color.WHITE);
        g2d.drawLine(6, height/3, width-12, height/3);
        g2d.drawLine(6, height/2, width-12, height/2);
        g2d.drawLine(6, height*2/3, width/2, height*2/3);
        
        g2d.dispose();
        return image;
    }

    private Image createLogoIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillOval(width/4, height/4, width/2, height/2);
        
        g2d.setColor(Color.WHITE);
        g2d.setFont(new Font("Arial", Font.BOLD, width/4));
        FontMetrics fm = g2d.getFontMetrics();
        g2d.drawString("C", width/2 - fm.stringWidth("C")/2, height/2 + fm.getHeight()/4);
        
        g2d.dispose();
        return image;
    }

    private Image createAvatarIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillOval(2, 2, width-4, height-4);
        g2d.setColor(Color.WHITE);
        g2d.fillOval(width/4, height/5, width/2, width/2);
        g2d.fillOval(width/4, height/2, width/2, height/2);
        
        g2d.dispose();
        return image;
    }

    private Image createAttachmentIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawLine(width/2, 4, width/2, height-4);
        g2d.drawRoundRect(width/4, height/4, width/2, height/2, 5, 5);
        
        g2d.dispose();
        return image;
    }

    private Image createUserListIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillOval(width/4, 2, width/2, height/3);
        g2d.drawLine(width/2, height/3+2, width/2, height/2);
        g2d.drawLine(4, height*2/3, width-4, height*2/3);
        g2d.drawLine(4, height*4/5, width-4, height*4/5);
        g2d.drawLine(4, height-4, width*2/3, height-4);
        
        g2d.dispose();
        return image;
    }

    private Image createEyeIcon(int width, int height, boolean open) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(Color.DARK_GRAY);
        g2d.drawOval(2, 5, width - 4, height - 10);
        
        if (open) {
            g2d.fillOval(width/2 - 2, height/2 - 2, 4, 4);
        } else {
            g2d.setStroke(new BasicStroke(2));
            g2d.drawLine(4, height/2, width - 4, height/2);
        }
        
        g2d.dispose();
        return image;
    }

    private Image createAudioIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRect(4, height/3, width/3, height/3);
        int[] xPoints = {width/3+4, width*2/3, width*2/3, width/3+4};
        int[] yPoints = {height/3, height/6, height*5/6, height*2/3};
        g2d.fillPolygon(xPoints, yPoints, 4);
        
        g2d.setStroke(new BasicStroke(1.5f));
        g2d.drawArc(width*2/3-2, height/4, width/6, height/2, -70, 140);
        g2d.drawArc(width*2/3, height/8, width/5, height*3/4, -70, 140);
        
        g2d.dispose();
        return image;
    }

    private Image createVideoIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRoundRect(2, 4, width*2/3, height-8, 5, 5);
        int[] xPoints = {width*2/3+3, width-2, width*2/3+3};
        int[] yPoints = {height/4, height/2, height*3/4};
        g2d.fillPolygon(xPoints, yPoints, 3);
        
        g2d.dispose();
        return image;
    }

    private Image createFileIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRect(4, 2, width*3/4, height-4);
        g2d.setColor(color.darker());
        int[] xPoints = {width*3/4+4, width*3/4+4, width-2};
        int[] yPoints = {2, height/4, height/4};
        g2d.fillPolygon(xPoints, yPoints, 3);
        
        g2d.setColor(Color.WHITE);
        g2d.drawLine(8, height/3, width*3/4, height/3);
        g2d.drawLine(8, height/2, width*3/4, height/2);
        g2d.drawLine(8, height*2/3, width*2/3, height*2/3);
        
        g2d.dispose();
        return image;
    }

    private Image createImageIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRect(2, 2, width-4, height-4);
        
        g2d.setColor(Color.YELLOW);
        g2d.fillOval(width/4, height/4, width/6, width/6);
        
        g2d.setColor(new Color(139, 69, 19));
        int[] xPoints = {2, width/3, width*2/3};
        int[] yPoints = {height-4, height/2, height-4};
        g2d.fillPolygon(xPoints, yPoints, 3);
        
        int[] xPoints2 = {width/2, width-4, width-4};
        int[] yPoints2 = {height/3, height-4, height/2};
        g2d.fillPolygon(xPoints2, yPoints2, 3);
        
        g2d.dispose();
        return image;
    }

    private Image createDocumentIcon(int width, int height, Color color) {
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = image.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setColor(color);
        g2d.fillRect(4, 2, width-8, height-4);
        
        g2d.setColor(Color.WHITE);
        g2d.drawLine(8, height/4, width-12, height/4);
        g2d.drawLine(8, height/2, width-12, height/2);
        g2d.drawLine(8, height*3/4, width-12, height*3/4);
        
        g2d.dispose();
        return image;
    }
    
    private ImageIcon createScaledIcon(String path, int width, int height) {
        try {
            ImageIcon originalIcon = new ImageIcon(getClass().getResource(path));
            Image scaledImage = originalIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);
        } catch (Exception e) {
            logger.log(Level.WARNING, "Could not load icon: " + path, e);
            return null;
        }
    }
    
    private void setLookAndFeel() {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    
                    UIManager.put("nimbusBase", PRIMARY_COLOR);
                    UIManager.put("nimbusBlueGrey", BACKGROUND_COLOR);
                    UIManager.put("control", BACKGROUND_COLOR);
                    UIManager.put("text", TEXT_COLOR);
                    UIManager.put("nimbusLightBackground", Color.WHITE);
                    UIManager.put("info", Color.WHITE);
                    
                    break;
                }
            }
        } catch (Exception e) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception ex) {
                logger.log(Level.WARNING, "Could not set look and feel", ex);
            }
        }
    }

    private void setupLogger() {
        try {
            File logsDir = new File("logs");
            if (!logsDir.exists()) {
                logsDir.mkdir();
            }
            
            Handler fileHandler = new FileHandler("logs/chatclient_" + clientCounter + ".log", true);
            fileHandler.setFormatter(new SimpleFormatter());
            Logger.getLogger("").addHandler(fileHandler);
            Logger.getLogger("").setLevel(Level.INFO);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JButton createStyledButton(String text, Color color) {
        JButton button = new JButton(text);
        button.setFont(BUTTON_FONT);
        button.setForeground(LIGHT_TEXT);
        button.setBackground(color);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        button.setBorder(new EmptyBorder(10, 16, 10, 16));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(color.darker());
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(color);
            }
            
            @Override
            public void mousePressed(MouseEvent e) {
                button.setBackground(color.darker().darker());
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                button.setBackground(color.darker());
            }
        });
        
        return button;
    }
    
    private JButton createIconButton(String text, ImageIcon icon, Color color) {
        JButton button = createStyledButton(text, color);
        if (icon != null) {
            button.setIcon(icon);
            button.setIconTextGap(8);
            button.setHorizontalTextPosition(SwingConstants.RIGHT);
        }
        return button;
    }
    
    private JPanel createStyledTextField(String placeholder, JTextField textField) {
        JPanel panel = new JPanel(new BorderLayout(0, 5));
        panel.setOpaque(false);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 70));
        
        JLabel label = new JLabel(placeholder);
        label.setFont(NORMAL_FONT);
        label.setForeground(PRIMARY_COLOR);
        
        textField.setFont(NORMAL_FONT);
        textField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 2, 0, PRIMARY_COLOR),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        textField.setOpaque(false);
        
        panel.add(label, BorderLayout.NORTH);
        panel.add(textField, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createStyledPasswordField(String placeholder, JPasswordField passwordField, 
                                            JToggleButton toggleButton) {
        JPanel panel = new JPanel(new BorderLayout(0, 5));
        panel.setOpaque(false);
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 70));
        
        JLabel label = new JLabel(placeholder);
        label.setFont(NORMAL_FONT);
        label.setForeground(PRIMARY_COLOR);
        
        JPanel passwordPanel = new JPanel(new BorderLayout());
        passwordPanel.setOpaque(false);
        
        passwordField.setFont(NORMAL_FONT);
        passwordField.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 2, 0, PRIMARY_COLOR),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        passwordField.setOpaque(false);
        
        toggleButton.setIcon(hidePasswordIcon);
        toggleButton.setSelectedIcon(showPasswordIcon);
        toggleButton.setBorderPainted(false);
        toggleButton.setContentAreaFilled(false);
        toggleButton.setFocusPainted(false);
        toggleButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        toggleButton.setToolTipText("Hiển thị/Ẩn mật khẩu");
        
        toggleButton.addActionListener(e -> {
            if (toggleButton.isSelected()) {
                passwordField.setEchoChar((char) 0);
            } else {
                passwordField.setEchoChar('•');
            }
        });
        
        passwordPanel.add(passwordField, BorderLayout.CENTER);
        passwordPanel.add(toggleButton, BorderLayout.EAST);
        
        panel.add(label, BorderLayout.NORTH);
        panel.add(passwordPanel, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createRoundedPanel(Color bgColor) {
        JPanel panel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(getBackground());
                g2.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 15, 15);
                g2.dispose();
            }
        };
        panel.setOpaque(false);
        panel.setBackground(bgColor);
        return panel;
    }
    
    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, 
                message, 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
    }
    
    private void showSuccessMessage(String message) {
        JOptionPane.showMessageDialog(this, 
                message, 
                "Thành công", 
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    private boolean showConfirmDialog(String message, String title) {
        int result = JOptionPane.showConfirmDialog(
                this, 
                message, 
                title, 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        
        return result == JOptionPane.YES_OPTION;
    }

    private void initComponents() {
        setTitle("Chat Client");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setSize(950, 700);
        setMinimumSize(new Dimension(850, 600));
        setLocationRelativeTo(null);
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                confirmAndExit();
            }
        });
        
        if (appIcon != null) {
            setIconImage(appIcon.getImage());
        }

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
        mainPanel.setBackground(BACKGROUND_COLOR);
        getContentPane().add(mainPanel);

        loginPanel = createLoginPanel();
        registerPanel = createRegisterPanel();
        chatPanel = createChatPanel();

        mainPanel.add(loginPanel, "login");
        mainPanel.add(registerPanel, "register");
        mainPanel.add(chatPanel, "chat");

        cardLayout.show(mainPanel, "login");
    }
    
    private void confirmAndExit() {
        if (isConnected) {
            if (showConfirmDialog(
                    "Bạn đang kết nối đến server. Bạn có chắc chắn muốn thoát?", 
                    "Xác nhận thoát")) {
                client.disconnect();
                dispose();
                System.exit(0);
            }
        } else {
            if (showConfirmDialog(
                    "Bạn có chắc chắn muốn thoát?", 
                    "Xác nhận thoát")) {
                dispose();
                System.exit(0);
            }
        }
    }

    private JPanel createLoginPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(BACKGROUND_COLOR);
        panel.setBorder(BorderFactory.createEmptyBorder(40, 60, 40, 60));

        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(BACKGROUND_COLOR);
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 30, 0));
           
        JLabel lblTitle = new JLabel("CHAT CLIENT");
        lblTitle.setFont(HEADER_FONT);
        lblTitle.setForeground(PRIMARY_COLOR);
        lblTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.add(lblTitle);
        
        JLabel lblSubtitle = new JLabel("Đăng nhập để bắt đầu trò chuyện");
        lblSubtitle.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        lblSubtitle.setForeground(TEXT_COLOR);
        lblSubtitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.add(lblSubtitle);
        
        panel.add(headerPanel);
        
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setBackground(Color.WHITE);
        formPanel.setBorder(BorderFactory.createCompoundBorder(
                new RoundedBorder(new Color(220, 220, 220), 12),
                BorderFactory.createEmptyBorder(30, 40, 30, 40)));
        formPanel.setMaximumSize(new Dimension(450, 400));
        formPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        tfUsername = new JTextField(20);
        JPanel usernamePanel = createStyledTextField("Tên đăng nhập", tfUsername);
        formPanel.add(usernamePanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        pfPassword = new JPasswordField(20);
        btnShowPassword = new JToggleButton();
        JPanel passwordPanel = createStyledPasswordField("Mật khẩu", pfPassword, btnShowPassword);
        formPanel.add(passwordPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        JPanel serverPanel = new JPanel();
        serverPanel.setLayout(new BoxLayout(serverPanel, BoxLayout.X_AXIS));
        serverPanel.setOpaque(false);
        
        tfServerIP = new JTextField("localhost", 20);
        JPanel serverIPPanel = createStyledTextField("Địa chỉ server", tfServerIP);
        serverIPPanel.setAlignmentY(Component.TOP_ALIGNMENT);
        
        tfPort = new JTextField("12345", 20);
        JPanel portPanel = createStyledTextField("Cổng", tfPort);
        portPanel.setBorder(BorderFactory.createEmptyBorder(0, 15, 0, 0));
        portPanel.setAlignmentY(Component.TOP_ALIGNMENT);
        
        serverPanel.add(serverIPPanel);
        serverPanel.add(portPanel);
        
        formPanel.add(serverPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        
        btnLogin = createIconButton("ĐĂNG NHẬP", loginIcon, PRIMARY_COLOR);
        btnLogin.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnLogin.setMaximumSize(new Dimension(Integer.MAX_VALUE, 50));
        btnLogin.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnLogin.addActionListener(e -> handleLogin());
        
        ActionListener loginAction = e -> handleLogin();
        tfUsername.addActionListener(loginAction);
        pfPassword.addActionListener(loginAction);
        tfServerIP.addActionListener(loginAction);
        tfPort.addActionListener(loginAction);
        
        formPanel.add(btnLogin);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        JPanel registerLinkPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        registerLinkPanel.setOpaque(false);
        
        JLabel lblNoAccount = new JLabel("Chưa có tài khoản? ");
        lblNoAccount.setFont(NORMAL_FONT);
        
        btnSwitchToRegister = new JButton("Đăng ký ngay");
        btnSwitchToRegister.setFont(BUTTON_FONT);
        btnSwitchToRegister.setForeground(PRIMARY_COLOR);
        btnSwitchToRegister.setBorderPainted(false);
        btnSwitchToRegister.setContentAreaFilled(false);
        btnSwitchToRegister.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnSwitchToRegister.addActionListener(e -> {
            cardLayout.show(mainPanel, "register");
        });
        
        registerLinkPanel.add(lblNoAccount);
        registerLinkPanel.add(btnSwitchToRegister);
        
        formPanel.add(registerLinkPanel);
        
        panel.add(formPanel);
        
        return panel;
    }
    
    private class RoundedBorder extends AbstractBorder {
        private final Color color;
        private final int radius;
        
        public RoundedBorder(Color color, int radius) {
            this.color = color;
            this.radius = radius;
        }
        
        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            Graphics2D g2 = (Graphics2D) g.create();
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(color);
            g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
            g2.dispose();
        }
        
        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(radius / 2, radius / 2, radius / 2, radius / 2);
        }
        
        @Override
        public boolean isBorderOpaque() {
            return false;
        }
    }
    
    private void handleLogin() {
        String username = tfUsername.getText().trim();
        String password = new String(pfPassword.getPassword());
        String serverIP = tfServerIP.getText().trim();
        String portText = tfPort.getText().trim();
        
        if (username.isEmpty() || password.isEmpty() || serverIP.isEmpty() || portText.isEmpty()) {
            showErrorMessage("Vui lòng nhập đầy đủ thông tin!");
            return;
        }
        
        try {
            int port = Integer.parseInt(portText);
            
            if (port < 1024 || port > 65535) {
                showErrorMessage("Port không hợp lệ! Port phải từ 1024 đến 65535.");
                return;
            }
            
            boolean loginValid = loginManager.login(username, password);
            
            if (!loginValid) {
                showErrorMessage("Thông tin đăng nhập không chính xác!");
                return;
            }
            
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            btnLogin.setEnabled(false);
            btnLogin.setText("Đang kết nối...");
            
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() throws Exception {
                    return client.connect(serverIP, port, username);
                }
                
                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        if (success) {
                            isConnected = true;
                            lblUserInfo.setText(username);
                            lblServerInfo.setText("Server: " + serverIP);
                            lblPortInfo.setText("Port: " + port);
                            cardLayout.show(mainPanel, "chat");
                            setTitle("Chat Client - " + username);
                            updateUserList(username, true);
                            displaySystemMessage("Đã kết nối đến server " + serverIP + " qua port " + port + "!");
                            taMessage.requestFocus();
                        } else {
                            showErrorMessage("Không thể kết nối đến server!");
                        }
                    } catch (Exception ex) {
                        showErrorMessage("Lỗi kết nối: " + ex.getMessage());
                        logger.log(Level.SEVERE, "Connection error", ex);
                    } finally {
                        setCursor(Cursor.getDefaultCursor());
                        btnLogin.setEnabled(true);
                        btnLogin.setText("ĐĂNG NHẬP");
                    }
                }
            };
            
            worker.execute();
        } catch (NumberFormatException ex) {
            showErrorMessage("Port không hợp lệ! Vui lòng nhập số.");
        }
    }

    private JPanel createRegisterPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBackground(BACKGROUND_COLOR);
        panel.setBorder(BorderFactory.createEmptyBorder(30, 60, 30, 60));

        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(BACKGROUND_COLOR);
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));
        
        JLabel lblTitle = new JLabel("TẠO TÀI KHOẢN MỚI");
        lblTitle.setFont(HEADER_FONT);
        lblTitle.setForeground(PRIMARY_COLOR);
        lblTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.add(lblTitle);
        
        JLabel lblSubtitle = new JLabel("Vui lòng nhập thông tin đăng ký");
        lblSubtitle.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        lblSubtitle.setForeground(TEXT_COLOR);
        lblSubtitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerPanel.add(lblSubtitle);
        
        panel.add(headerPanel);
        
        JPanel formPanel = new JPanel();
        formPanel.setLayout(new BoxLayout(formPanel, BoxLayout.Y_AXIS));
        formPanel.setBackground(Color.WHITE);
        formPanel.setBorder(BorderFactory.createCompoundBorder(
                new RoundedBorder(new Color(220, 220, 220), 12),
                BorderFactory.createEmptyBorder(25, 40, 25, 40)));
        formPanel.setMaximumSize(new Dimension(450, 500));
        formPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JTextField tfRegUsername = new JTextField(20);
        JPanel usernamePanel = createStyledTextField("Tên đăng nhập", tfRegUsername);
        formPanel.add(usernamePanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        JPasswordField pfRegPassword = new JPasswordField(20);
        btnShowPasswordConfirm = new JToggleButton();
        JPanel passwordPanel = createStyledPasswordField("Mật khẩu", pfRegPassword, btnShowPasswordConfirm);
        formPanel.add(passwordPanel);
        
        JPanel strengthPanel = new JPanel(new BorderLayout(10, 0));
        strengthPanel.setOpaque(false);
        
        passwordStrengthLabel = new JLabel("Độ mạnh: Chưa nhập");
        passwordStrengthLabel.setFont(SMALL_FONT);
        passwordStrengthLabel.setForeground(SYSTEM_MESSAGE_COLOR);
        
        passwordStrengthBar = new JProgressBar(0, 100);
        passwordStrengthBar.setValue(0);
        passwordStrengthBar.setStringPainted(false);
        passwordStrengthBar.setPreferredSize(new Dimension(100, 5));
        
        strengthPanel.add(passwordStrengthLabel, BorderLayout.WEST);
        strengthPanel.add(passwordStrengthBar, BorderLayout.CENTER);
        
        formPanel.add(strengthPanel);
        
        JLabel passwordReqLabel = new JLabel("<html>Mật khẩu phải có ít nhất 8 kí tự, bao gồm: chữ hoa, chữ thường, số và kí tự đặc biệt (!@#$%^&*()-+=)</html>");
        passwordReqLabel.setFont(SMALL_FONT);
        passwordReqLabel.setForeground(SYSTEM_MESSAGE_COLOR);
        passwordReqLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 15, 0));
        formPanel.add(passwordReqLabel);
        
        pfRegPassword.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                updatePasswordStrength(new String(pfRegPassword.getPassword()));
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                updatePasswordStrength(new String(pfRegPassword.getPassword()));
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                updatePasswordStrength(new String(pfRegPassword.getPassword()));
            }
        });
        
        pfPasswordConfirm = new JPasswordField(20);
        JToggleButton btnShowConfirmPassword = new JToggleButton();
        JPanel confirmPasswordPanel = createStyledPasswordField("Xác nhận mật khẩu", pfPasswordConfirm, btnShowConfirmPassword);
        formPanel.add(confirmPasswordPanel);
        formPanel.add(Box.createRigidArea(new Dimension(0, 25)));
        
        btnRegister = createIconButton("ĐĂNG KÝ", registerIcon, ACCENT_COLOR);
        btnRegister.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnRegister.setMaximumSize(new Dimension(Integer.MAX_VALUE, 50));
        btnRegister.setFont(new Font("Segoe UI", Font.BOLD, 16));
        btnRegister.addActionListener(e -> {
            String username = tfRegUsername.getText().trim();
            String password = new String(pfRegPassword.getPassword());
            String confirmPassword = new String(pfPasswordConfirm.getPassword());
            
            if (username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
                showErrorMessage("Vui lòng nhập đầy đủ thông tin!");
                return;
            }
            
            if (!password.equals(confirmPassword)) {
                showErrorMessage("Mật khẩu xác nhận không khớp!");
                return;
            }
            
            if (username.length() < 3) {
                showErrorMessage("Tên người dùng phải có ít nhất 3 ký tự!");
                return;
            }
            
            if (password.length() < 8) {
                showErrorMessage("Mật khẩu phải có ít nhất 8 ký tự!");
                return;
            }
            
            if (!PASSWORD_PATTERN.matcher(password).matches()) {
                showErrorMessage("Mật khẩu không đủ mạnh! Mật khẩu phải có ít nhất 8 kí tự, bao gồm: chữ hoa, chữ thường, số và kí tự đặc biệt.");
                return;
            }
            
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            btnRegister.setEnabled(false);
            btnRegister.setText("Đang xử lý...");
            
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() throws Exception {
                    return loginManager.register(username, password);
                }
                
                @Override
                protected void done() {
                    try {
                        boolean success = get();
                        
                        if (success) {
                            showSuccessMessage("Đăng ký thành công!");
                            
                            tfUsername.setText(username);
                            pfPassword.setText(password);
                            cardLayout.show(mainPanel, "login");
                        } else {
                            showErrorMessage("Tên người dùng đã tồn tại!");
                        }
                    } catch (Exception ex) {
                        showErrorMessage("Lỗi đăng ký: " + ex.getMessage());
                        logger.log(Level.SEVERE, "Registration error", ex);
                    } finally {
                        setCursor(Cursor.getDefaultCursor());
                        btnRegister.setEnabled(true);
                        btnRegister.setText("ĐĂNG KÝ");
                    }
                }
            };
            
            worker.execute();
        });
        
        ActionListener registerAction = e -> btnRegister.doClick();
        tfRegUsername.addActionListener(registerAction);
        pfRegPassword.addActionListener(registerAction);
        pfPasswordConfirm.addActionListener(registerAction);
        
        formPanel.add(btnRegister);
        formPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        
        JPanel loginLinkPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        loginLinkPanel.setOpaque(false);
        
        JLabel lblHaveAccount = new JLabel("Đã có tài khoản? ");
        lblHaveAccount.setFont(NORMAL_FONT);
        
        btnSwitchToLogin = new JButton("Đăng nhập ngay");
        btnSwitchToLogin.setFont(BUTTON_FONT);
        btnSwitchToLogin.setForeground(PRIMARY_COLOR);
        btnSwitchToLogin.setBorderPainted(false);
        btnSwitchToLogin.setContentAreaFilled(false);
        btnSwitchToLogin.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnSwitchToLogin.addActionListener(e -> {
            cardLayout.show(mainPanel, "login");
        });
        
        loginLinkPanel.add(lblHaveAccount);
        loginLinkPanel.add(btnSwitchToLogin);
        
        formPanel.add(loginLinkPanel);
        
        panel.add(formPanel);
        
        return panel;
    }
    
    private void updatePasswordStrength(String password) {
        if (password.isEmpty()) {
            passwordStrengthLabel.setText("Độ mạnh: Chưa nhập");
            passwordStrengthLabel.setForeground(SYSTEM_MESSAGE_COLOR);
            passwordStrengthBar.setValue(0);
            passwordStrengthBar.setForeground(SYSTEM_MESSAGE_COLOR);
            return;
        }
        
        int strength = calculatePasswordStrength(password);
        passwordStrengthBar.setValue(strength);
        
        if (strength < 40) {
            passwordStrengthLabel.setText("Độ mạnh: Yếu");
            passwordStrengthLabel.setForeground(ERROR_COLOR);
            passwordStrengthBar.setForeground(ERROR_COLOR);
        } else if (strength < 70) {
            passwordStrengthLabel.setText("Độ mạnh: Trung bình");
            passwordStrengthLabel.setForeground(WARNING_COLOR);
            passwordStrengthBar.setForeground(WARNING_COLOR);
        } else {
            passwordStrengthLabel.setText("Độ mạnh: Mạnh");
            passwordStrengthLabel.setForeground(SUCCESS_COLOR);
            passwordStrengthBar.setForeground(SUCCESS_COLOR);
        }
    }
    
    private int calculatePasswordStrength(String password) {
        int score = 0;
        
        if (password.length() >= 8) score += 20;
        else if (password.length() >= 6) score += 10;
        
        if (password.matches(".*[a-z].*")) score += 10;
        
        if (password.matches(".*[A-Z].*")) score += 15;
        
        if (password.matches(".*[0-9].*")) score += 15;
        
        if (password.matches(".*[!@#$%^&*()\\-+=].*")) score += 20;
        
        if (password.matches(".*[A-Za-z].*") && 
            password.matches(".*[0-9].*") && 
            password.matches(".*[!@#$%^&*()\\-+=].*")) {
            score += 20;
        }
        
        return Math.min(score, 100);
    }

    private JPanel createChatPanel() {
        JPanel panel = new JPanel(new BorderLayout(0, 0));
        panel.setBackground(BACKGROUND_COLOR);

        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(PRIMARY_COLOR);
        headerPanel.setBorder(BorderFactory.createEmptyBorder(12, 15, 12, 15));
        
        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 0));
        infoPanel.setOpaque(false);
        
        JPanel userPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        userPanel.setOpaque(false);
        
        if (avatarIcon != null) {
            JLabel lblAvatar = new JLabel(avatarIcon);
            userPanel.add(lblAvatar);
        }
        
        lblUserInfo = new JLabel("Username");
        lblUserInfo.setFont(new Font("Segoe UI", Font.BOLD, 16));
        lblUserInfo.setForeground(LIGHT_TEXT);
        userPanel.add(lblUserInfo);
        
        infoPanel.add(userPanel);
        
        JPanel serverDetailsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 0));
        serverDetailsPanel.setOpaque(false);
        
        lblServerInfo = new JLabel("Server: N/A");
        lblServerInfo.setFont(NORMAL_FONT);
        lblServerInfo.setForeground(LIGHT_TEXT);
        serverDetailsPanel.add(lblServerInfo);
        
        lblPortInfo = new JLabel("Port: N/A");
        lblPortInfo.setFont(NORMAL_FONT);
        lblPortInfo.setForeground(LIGHT_TEXT);
        serverDetailsPanel.add(lblPortInfo);
        
        lblOnlineUsers = new JLabel("0 người dùng trực tuyến");
        lblOnlineUsers.setFont(NORMAL_FONT);
        lblOnlineUsers.setForeground(LIGHT_TEXT);
        lblOnlineUsers.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        lblOnlineUsers.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                showOnlineUsersList();
            }
            
            @Override
            public void mouseEntered(MouseEvent e) {
                lblOnlineUsers.setText("<html><u>" + lblOnlineUsers.getText().replace("<html><u>", "").replace("</u></html>", "") + "</u></html>");
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                lblOnlineUsers.setText(lblOnlineUsers.getText().replace("<html><u>", "").replace("</u></html>", ""));
            }
        });
        lblOnlineUsers.setIcon(userListIcon);
        serverDetailsPanel.add(lblOnlineUsers);
        
        infoPanel.add(serverDetailsPanel);
        
        headerPanel.add(infoPanel, BorderLayout.WEST);
        
        btnDisconnect = createIconButton("Đăng xuất", disconnectIcon, ERROR_COLOR);
        btnDisconnect.setFont(new Font("Segoe UI", Font.BOLD, 14));
        btnDisconnect.addActionListener(e -> {
            if (showConfirmDialog(
                    "Bạn có chắc chắn muốn đăng xuất?", 
                    "Xác nhận đăng xuất")) {
                disconnectFromServer();
            }
        });
        
        headerPanel.add(btnDisconnect, BorderLayout.EAST);
        
        panel.add(headerPanel, BorderLayout.NORTH);

        JPanel mainContentPanel = new JPanel(new BorderLayout());
        mainContentPanel.setBackground(BACKGROUND_COLOR);
        
        JPanel chatArea = new JPanel(new BorderLayout());
        chatArea.setBackground(CHAT_BG);
        chatArea.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        chatArea.setPreferredSize(new Dimension(CHAT_PANEL_WIDTH, 0));
        
        tpChat = new JTextPane();
        tpChat.setEditable(false);
        tpChat.setBackground(Color.WHITE);
        tpChat.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        chatDocument = tpChat.getStyledDocument();
        
        systemStyle = tpChat.addStyle("System", null);
        StyleConstants.setForeground(systemStyle, SYSTEM_MESSAGE_COLOR);
        StyleConstants.setFontFamily(systemStyle, "Segoe UI");
        StyleConstants.setFontSize(systemStyle, 13);
        StyleConstants.setAlignment(systemStyle, StyleConstants.ALIGN_CENTER);
        StyleConstants.setItalic(systemStyle, true);
        
        joinLeaveStyle = tpChat.addStyle("JoinLeave", null);
        StyleConstants.setForeground(joinLeaveStyle, JOIN_COLOR);
        StyleConstants.setFontFamily(joinLeaveStyle, "Segoe UI");
        StyleConstants.setFontSize(joinLeaveStyle, 13);
        StyleConstants.setAlignment(joinLeaveStyle, StyleConstants.ALIGN_CENTER);
        StyleConstants.setItalic(joinLeaveStyle, true);
        
        myMessageStyle = tpChat.addStyle("Me", null);
        StyleConstants.setForeground(myMessageStyle, LIGHT_TEXT);
        StyleConstants.setFontFamily(myMessageStyle, "Segoe UI");
        StyleConstants.setFontSize(myMessageStyle, 14);
        StyleConstants.setBold(myMessageStyle, true);
        StyleConstants.setAlignment(myMessageStyle, StyleConstants.ALIGN_RIGHT);
        
        otherMessageStyle = tpChat.addStyle("Other", null);
        StyleConstants.setForeground(otherMessageStyle, TEXT_COLOR);
        StyleConstants.setFontFamily(otherMessageStyle, "Segoe UI");
        StyleConstants.setFontSize(otherMessageStyle, 14);
        StyleConstants.setAlignment(otherMessageStyle, StyleConstants.ALIGN_LEFT);
        
        JScrollPane chatScrollPane = new JScrollPane(tpChat);
        chatScrollPane.setBorder(BorderFactory.createEmptyBorder());
        chatScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        chatScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        chatArea.add(chatScrollPane, BorderLayout.CENTER);
        
        // Thêm component listener để điều chỉnh kích thước khi cửa sổ thay đổi
        tpChat.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                repaintChatAndAdjustWidths();
            }
        });
        
        JPanel usersContainerPanel = new JPanel(new BorderLayout());
        usersContainerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        usersContainerPanel.setBackground(BACKGROUND_COLOR);
        usersContainerPanel.setPreferredSize(new Dimension(USER_PANEL_WIDTH, 0));
        
        userListPanel = new JPanel();
        userListPanel.setLayout(new BoxLayout(userListPanel, BoxLayout.Y_AXIS));
        userListPanel.setBackground(Color.WHITE);
        userListPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JLabel lblUsersHeader = new JLabel("NGƯỜI DÙNG TRỰC TUYẾN");
        lblUsersHeader.setFont(SUB_HEADER_FONT);
        lblUsersHeader.setForeground(PRIMARY_COLOR);
        lblUsersHeader.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        lblUsersHeader.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        userListPanel.add(lblUsersHeader);
        
        JScrollPane userListScrollPane = new JScrollPane(userListPanel);
        userListScrollPane.setBorder(BorderFactory.createEmptyBorder());
        userListScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        userListScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        usersContainerPanel.add(userListScrollPane, BorderLayout.CENTER);
        
        mainContentPanel.add(chatArea, BorderLayout.CENTER);
        mainContentPanel.add(usersContainerPanel, BorderLayout.EAST);
        
        panel.add(mainContentPanel, BorderLayout.CENTER);

        // Cải thiện input panel để chiếm toàn bộ chiều rộng của khung chat
        JPanel inputPanel = new JPanel(new BorderLayout(10, 0));
        inputPanel.setBackground(Color.WHITE);
        inputPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(1, 0, 0, 0, new Color(220, 220, 220)),
                BorderFactory.createEmptyBorder(15, 15, 15, 15)));
        inputPanel.setPreferredSize(new Dimension(0, INPUT_PANEL_HEIGHT));
        
        JPanel messagePanel = new JPanel(new BorderLayout(10, 0));
        messagePanel.setOpaque(false);
        
        taMessage = new JTextArea(3, 20);
        taMessage.setFont(NORMAL_FONT);
        taMessage.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(220, 220, 220), 1, true),
                BorderFactory.createEmptyBorder(10, 15, 10, 15)));
        taMessage.setLineWrap(true);
        taMessage.setWrapStyleWord(true); // Để không tách từ khi xuống dòng

        taMessage.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && !e.isShiftDown()) {
                    sendMessage();
                    e.consume();
                }
            }
        });
        
        JScrollPane messageScrollPane = new JScrollPane(taMessage);
        messageScrollPane.setBorder(BorderFactory.createEmptyBorder());
        messageScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        messageScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        messagePanel.add(messageScrollPane, BorderLayout.CENTER);
        
        btnAttachment = createIconButton("", attachmentIcon, ATTACHMENT_COLOR);
        btnAttachment.setToolTipText("Đính kèm file");
        btnAttachment.setFocusPainted(false);
        btnAttachment.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnAttachment.setPreferredSize(new Dimension(50, 40)); // Tăng kích thước nút
        btnAttachment.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        btnAttachment.setFont(BUTTON_FONT);
        
        btnAttachment.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                btnAttachment.setBackground(ATTACHMENT_COLOR.darker());
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                btnAttachment.setBackground(ATTACHMENT_COLOR);
            }
        });
        
        btnAttachment.addActionListener(e -> {
            File selectedFile = fileHandler.selectFile("all");
            if (selectedFile != null) {
                client.sendFile(selectedFile);
            }
        });
        
        btnSend = createIconButton("", sendIcon, PRIMARY_COLOR);
        btnSend.setBackground(PRIMARY_COLOR);
        btnSend.setForeground(LIGHT_TEXT);
        btnSend.setPreferredSize(new Dimension(50, 40)); // Tăng kích thước nút
        btnSend.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));
        btnSend.setFocusPainted(false);
        btnSend.setToolTipText("Gửi tin nhắn (Enter)");
        btnSend.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btnSend.setFont(BUTTON_FONT);
        btnSend.addActionListener(e -> {
            sendMessage();
        });
        
        btnSend.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                btnSend.setBackground(PRIMARY_DARK_COLOR);
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                btnSend.setBackground(PRIMARY_COLOR);
            }
        });
        
        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0));
        buttonsPanel.setOpaque(false);
        buttonsPanel.add(btnAttachment);
        buttonsPanel.add(btnSend);
        
        messagePanel.add(buttonsPanel, BorderLayout.EAST);
        
        inputPanel.add(messagePanel, BorderLayout.CENTER);
        
        panel.add(inputPanel, BorderLayout.SOUTH);

        return panel;
    }
    
private void repaintChatAndAdjustWidths() {
    // Cập nhật lại các giới hạn chiều rộng khi cửa sổ thay đổi kích thước
    SwingUtilities.invokeLater(() -> {
        int chatWidth = tpChat.getWidth();
        if (chatWidth <= 0) return;
    });
}
    
    public void updateFileProgress(String fileName, int progress) {
        SwingUtilities.invokeLater(() -> {
            fileProgressMap.put(fileName, progress);
            String progressText = "Đang gửi file: " + fileName + " (" + progress + "%)";
            
            try {
                Document doc = tpChat.getDocument();
                String text = doc.getText(0, doc.getLength());
                String filePattern = "Đang gửi file: " + fileName;
                
                int lastIndex = text.lastIndexOf(filePattern);
                if (lastIndex >= 0) {
                    int endOfLine = text.indexOf("\n", lastIndex);
                    if (endOfLine < 0) endOfLine = text.length();
                    
                    doc.remove(lastIndex, endOfLine - lastIndex);
                    doc.insertString(lastIndex, progressText, null);
                } else {
                    displaySystemMessage(progressText);
                }
            } catch (BadLocationException e) {
                logger.log(Level.WARNING, "Error updating file progress", e);
            }
        });
    }
    
    private void showOnlineUsersList() {
        JDialog userDialog = new JDialog(this, "Người dùng trực tuyến", true);
        userDialog.setSize(300, 400);
        userDialog.setLocationRelativeTo(this);
        userDialog.setLayout(new BorderLayout());
        
        JPanel usersPanel = new JPanel();
        usersPanel.setLayout(new BoxLayout(usersPanel, BoxLayout.Y_AXIS));
        usersPanel.setBackground(Color.WHITE);
        usersPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        
        JLabel headerLabel = new JLabel("NGƯỜI DÙNG TRỰC TUYẾN (" + onlineUsers.size() + ")");
        headerLabel.setFont(SUB_HEADER_FONT);
        headerLabel.setForeground(PRIMARY_COLOR);
        headerLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        headerLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 15, 0));
        
        usersPanel.add(headerLabel);
        
        for (String user : onlineUsers) {
            JPanel userPanel = new JPanel(new BorderLayout());
            userPanel.setBackground(Color.WHITE);
            userPanel.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(230, 230, 230)),
                    BorderFactory.createEmptyBorder(10, 5, 10, 5)));
            
            JLabel userLabel = new JLabel(user);
            userLabel.setFont(NORMAL_FONT);
            
            if (avatarIcon != null) {
                userLabel.setIcon(avatarIcon);
                userLabel.setIconTextGap(10);
            }
            
            userPanel.add(userLabel, BorderLayout.WEST);
            
            JPanel statusPanel = new JPanel() {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g2d.setColor(SUCCESS_COLOR);
                    g2d.fillOval(0, 0, 10, 10);
                }
            };
            statusPanel.setOpaque(false);
            statusPanel.setPreferredSize(new Dimension(10, 10));
            
            JPanel indicatorContainer = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            indicatorContainer.setOpaque(false);
            indicatorContainer.add(statusPanel);
            
            userPanel.add(indicatorContainer, BorderLayout.EAST);
            
            userPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, userPanel.getPreferredSize().height));
            usersPanel.add(userPanel);
        }
        
        JScrollPane scrollPane = new JScrollPane(usersPanel);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        userDialog.add(scrollPane, BorderLayout.CENTER);
        
        JButton closeButton = createStyledButton("Đóng", PRIMARY_COLOR);
        closeButton.addActionListener(e -> userDialog.dispose());
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(Color.WHITE);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        buttonPanel.add(closeButton);
        
        userDialog.add(buttonPanel, BorderLayout.SOUTH);
        
        userDialog.setVisible(true);
    }
    
    public void updateUserList(String username, boolean isJoining) {
        if (isJoining) {
            if (!onlineUsers.contains(username)) {
                onlineUsers.add(username);
            }
        } else {
            onlineUsers.remove(username);
        }
        
        lblOnlineUsers.setText(onlineUsers.size() + " người dùng trực tuyến");
        
        updateUserListPanel();
    }
    
    private void updateUserListPanel() {
        userListPanel.removeAll();
        
        JLabel lblUsersHeader = new JLabel("NGƯỜI DÙNG TRỰC TUYẾN (" + onlineUsers.size() + ")");
        lblUsersHeader.setFont(SUB_HEADER_FONT);
        lblUsersHeader.setForeground(PRIMARY_COLOR);
        lblUsersHeader.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));
        lblUsersHeader.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        userListPanel.add(lblUsersHeader);
        userListPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        
        for (String user : onlineUsers) {
            JPanel userPanel = new JPanel(new BorderLayout());
            userPanel.setBackground(Color.WHITE);
            userPanel.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(230, 230, 230)),
                    BorderFactory.createEmptyBorder(10, 10, 10, 10)));
            
            JLabel userLabel = new JLabel(user);
            userLabel.setFont(NORMAL_FONT);
            
            if (avatarIcon != null) {
                userLabel.setIcon(avatarIcon);
                userLabel.setIconTextGap(15);
            }
            
            userPanel.add(userLabel, BorderLayout.WEST);
            
            JPanel statusPanel = new JPanel() {
                @Override
                protected void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    Graphics2D g2d = (Graphics2D) g;
                    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g2d.setColor(SUCCESS_COLOR);
                    g2d.fillOval(0, 0, 12, 12);
                }
            };
            statusPanel.setOpaque(false);
            statusPanel.setPreferredSize(new Dimension(12, 12));
            
            JPanel indicatorContainer = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            indicatorContainer.setOpaque(false);
            indicatorContainer.add(statusPanel);
            
            userPanel.add(indicatorContainer, BorderLayout.EAST);
            
            userPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, userPanel.getPreferredSize().height));
            userListPanel.add(userPanel);
        }
        
        userListPanel.revalidate();
        userListPanel.repaint();
    }

    private void disconnectFromServer() {
        if (isConnected) {
            client.disconnect();
            isConnected = false;
            cardLayout.show(mainPanel, "login");
            setTitle("Chat Client");
            onlineUsers.clear();
        }
    }

    public void handleServerShutdown() {
        SwingUtilities.invokeLater(() -> {
            if (isConnected) {
                isConnected = false;
                cardLayout.show(mainPanel, "login");
                setTitle("Chat Client");
                JOptionPane.showMessageDialog(ChatClientGUI.this, 
                        "Server đã đóng kết nối!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                onlineUsers.clear();
            }
        });
    }

    private void sendMessage() {
        String message = taMessage.getText().trim();
        if (!message.isEmpty() && isConnected) {
            client.sendMessage(message);
            taMessage.setText("");
            taMessage.requestFocus();
        }
    }

    public void displaySystemMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String timeStamp = sdf.format(new Date());
            
            String formattedMessage = String.format(
                    "[%s] %s", 
                    timeStamp, 
                    message);
            
            Style styleToUse = systemStyle;
            if (message.contains(" đã tham gia chat!")) {
                styleToUse = joinLeaveStyle;
                String username = message.substring(0, message.indexOf(" đã tham gia chat!"));
                updateUserList(username, true);
            } else if (message.contains(" đã rời chat!")) {
                styleToUse = joinLeaveStyle;
                StyleConstants.setForeground(joinLeaveStyle, LEAVE_COLOR);
                String username = message.substring(0, message.indexOf(" đã rời chat!"));
                updateUserList(username, false);
                StyleConstants.setForeground(joinLeaveStyle, JOIN_COLOR);
            }
            
            try {
                int start = chatDocument.getLength();
                chatDocument.insertString(start, formattedMessage + "\n", styleToUse);
                
                SimpleAttributeSet center = new SimpleAttributeSet();
                StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
                chatDocument.setParagraphAttributes(start, chatDocument.getLength() - start, center, false);
            } catch (BadLocationException e) {
                logger.log(Level.WARNING, "Error displaying system message", e);
                tpChat.setText(tpChat.getText() + formattedMessage + "\n");
            }
            
            tpChat.setCaretPosition(chatDocument.getLength());
        });
    }
    
    public void displaySentMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
            String timeStamp = sdf.format(new Date());
            
            try {
                int start = chatDocument.getLength();
                chatDocument.insertString(start, "\n", null);
                
                // Tính số ký tự trên mỗi dòng dựa trên nửa chiều rộng khung chat
                int charsPerLine = MAX_CHARS_PER_LINE;
                if (tpChat.getWidth() > 0) {
                    FontMetrics fm = tpChat.getFontMetrics(CHAT_FONT);
                    charsPerLine = (tpChat.getWidth() / 2) / fm.charWidth('m');
                }
                
                String wrappedMessage = wrapMessage(message, charsPerLine);
                
                // Tạo bubble cho tin nhắn của mình
                JPanel messagePanel = new JPanel(new BorderLayout(5, 2));
                messagePanel.setBackground(new Color(0, 0, 0, 0));
                
                JPanel bubblePanel = new JPanel() {
                    @Override
                    protected void paintComponent(Graphics g) {
                        Graphics2D g2 = (Graphics2D) g.create();
                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                        g2.setColor(MY_MESSAGE_BG);
                        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 16, 16);
                        g2.dispose();
                    }
                };
                bubblePanel.setOpaque(false);
                bubblePanel.setLayout(new BorderLayout());
                
                JLabel messageLabel = new JLabel("<html><div style='color: white; padding: 5px 10px 5px 10px;'>" + 
                                               wrappedMessage.replace("\n", "<br>") + "</div></html>");
                messageLabel.setFont(CHAT_FONT);
                bubblePanel.add(messageLabel, BorderLayout.CENTER);
                
                JLabel timeLabel = new JLabel(timeStamp);
                timeLabel.setFont(SMALL_FONT);
                timeLabel.setForeground(Color.DARK_GRAY);
                
                messagePanel.add(bubblePanel, BorderLayout.LINE_END);
                messagePanel.add(timeLabel, BorderLayout.SOUTH);
                
                // Chèn panel tin nhắn vào document
                Style style = chatDocument.addStyle("MessagePanelStyle", null);
                StyleConstants.setComponent(style, messagePanel);
                
                start = chatDocument.getLength();
                chatDocument.insertString(start, " ", style);
                
                SimpleAttributeSet right = new SimpleAttributeSet();
                StyleConstants.setAlignment(right, StyleConstants.ALIGN_RIGHT);
                chatDocument.setParagraphAttributes(start, 1, right, false);
                
                chatDocument.insertString(start + 1, "\n", null);
            } catch (BadLocationException e) {
                logger.log(Level.WARNING, "Error displaying sent message", e);
                try {
                    chatDocument.insertString(chatDocument.getLength(), 
                                            timeStamp + " You: " + message + "\n", 
                                            myMessageStyle);
                } catch (BadLocationException ex) {
                    logger.log(Level.SEVERE, "Cannot insert fallback message", ex);
                }
            }
            
            tpChat.setCaretPosition(chatDocument.getLength());
        });
    }
    
    public void displayReceivedMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
            String timeStamp = sdf.format(new Date());
            
            String sender;
            String content;
            int colonIndex = message.indexOf(": ");
            
            if (colonIndex > 0) {
                sender = message.substring(0, colonIndex);
                content = message.substring(colonIndex + 2);
            } else {
                sender = "Unknown";
                content = message;
            }
            
            try {
                int start = chatDocument.getLength();
                chatDocument.insertString(start, "\n", null);
                
                // Tính số ký tự trên mỗi dòng dựa trên nửa chiều rộng khung chat
                int charsPerLine = MAX_CHARS_PER_LINE;
                if (tpChat.getWidth() > 0) {
                    FontMetrics fm = tpChat.getFontMetrics(CHAT_FONT);
                    charsPerLine = (tpChat.getWidth() / 2) / fm.charWidth('m');
                }
                
                String wrappedContent = wrapMessage(content, charsPerLine);
                
                // Tạo bubble cho tin nhắn của người khác
                JPanel messagePanel = new JPanel(new BorderLayout(5, 2));
                messagePanel.setBackground(new Color(0, 0, 0, 0));
                
                JLabel senderLabel = new JLabel(sender);
                senderLabel.setFont(SMALL_FONT);
                senderLabel.setForeground(SYSTEM_MESSAGE_COLOR);
                messagePanel.add(senderLabel, BorderLayout.NORTH);
                
                JPanel bubblePanel = new JPanel() {
                    @Override
                    protected void paintComponent(Graphics g) {
                        Graphics2D g2 = (Graphics2D) g.create();
                        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                        g2.setColor(OTHER_MESSAGE_BG);
                        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 16, 16);
                        g2.dispose();
                    }
                };
                bubblePanel.setOpaque(false);
                bubblePanel.setLayout(new BorderLayout());
                
                JLabel messageLabel = new JLabel("<html><div style='color: black; padding: 5px 10px 5px 10px;'>" + 
                                               wrappedContent.replace("\n", "<br>") + "</div></html>");
                messageLabel.setFont(CHAT_FONT);
                bubblePanel.add(messageLabel, BorderLayout.CENTER);
                
                JLabel timeLabel = new JLabel(timeStamp);
                timeLabel.setFont(SMALL_FONT);
                timeLabel.setForeground(Color.DARK_GRAY);
                
                messagePanel.add(bubblePanel, BorderLayout.LINE_START);
                messagePanel.add(timeLabel, BorderLayout.SOUTH);
                
                // Chèn panel tin nhắn vào document
                Style style = chatDocument.addStyle("OtherMessagePanelStyle", null);
                StyleConstants.setComponent(style, messagePanel);
                
                start = chatDocument.getLength();
                chatDocument.insertString(start, " ", style);
                
                SimpleAttributeSet left = new SimpleAttributeSet();
                StyleConstants.setAlignment(left, StyleConstants.ALIGN_LEFT);
                chatDocument.setParagraphAttributes(start, 1, left, false);
                
                chatDocument.insertString(start + 1, "\n", null);
            } catch (BadLocationException e) {
                logger.log(Level.WARNING, "Error displaying received message", e);
                try {
                    chatDocument.insertString(chatDocument.getLength(), 
                                            timeStamp + " " + sender + ": " + content + "\n", 
                                            otherMessageStyle);
                } catch (BadLocationException ex) {
                    logger.log(Level.SEVERE, "Cannot insert fallback message", ex);
                }
            }
            
            tpChat.setCaretPosition(chatDocument.getLength());
        });
    }
    
    private String wrapMessage(String message, int charsPerLine) {
        StringBuilder result = new StringBuilder();
        String[] words = message.split(" ");
        int lineLength = 0;
        
        for (String word : words) {
            // Kiểm tra xem từ này có làm dòng vượt quá giới hạn không
            if (lineLength + word.length() > charsPerLine) {
                result.append("\n");
                lineLength = 0;
            } else if (lineLength > 0) {
                result.append(" ");
                lineLength++;
            }
            
            result.append(word);
            lineLength += word.length();
        }
        
        return result.toString();
    }
    
    public void displayFileMessage(String sender, String filename, String fileType, String fileDetails) {
        SwingUtilities.invokeLater(() -> {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
            String timeStamp = sdf.format(new Date());
            
            try {
                int start = chatDocument.getLength();
                chatDocument.insertString(start, "\n", null);
                
                boolean isSentByMe = sender.equals(lblUserInfo.getText());
                
                // Tạo container cho file
                JPanel filePanel = new JPanel(new BorderLayout(5, 2));
                filePanel.setBackground(new Color(0, 0, 0, 0));
                
                if (!isSentByMe) {
                    JLabel senderLabel = new JLabel(sender);
                    senderLabel.setFont(SMALL_FONT);
                    senderLabel.setForeground(SYSTEM_MESSAGE_COLOR);
                    filePanel.add(senderLabel, BorderLayout.NORTH);
                }
                
                // Container phía trong cho file
                JPanel fileContainer = createClickableFileContainer(filename, fileType, fileDetails, isSentByMe, 250);
                
                JLabel timeLabel = new JLabel(timeStamp);
                timeLabel.setFont(SMALL_FONT);
                timeLabel.setForeground(Color.DARK_GRAY);
                
                if (isSentByMe) {
                    filePanel.add(fileContainer, BorderLayout.LINE_END);
                } else {
                    filePanel.add(fileContainer, BorderLayout.LINE_START);
                }
                
                filePanel.add(timeLabel, BorderLayout.SOUTH);
                
                // Chèn panel file vào document
                Style style = chatDocument.addStyle("FileMessageStyle", null);
                StyleConstants.setComponent(style, filePanel);
                
                start = chatDocument.getLength();
                chatDocument.insertString(start, " ", style);
                
                SimpleAttributeSet alignment = new SimpleAttributeSet();
                if (isSentByMe) {
                    StyleConstants.setAlignment(alignment, StyleConstants.ALIGN_RIGHT);
                } else {
                    StyleConstants.setAlignment(alignment, StyleConstants.ALIGN_LEFT);
                }
                chatDocument.setParagraphAttributes(start, 1, alignment, false);
                
                chatDocument.insertString(start + 1, "\n", null);
            } catch (BadLocationException e) {
                logger.log(Level.WARNING, "Error displaying file message", e);
                String basicMessage = "[" + timeStamp + "] " + sender + " gửi file: " + filename;
                try {
                    chatDocument.insertString(chatDocument.getLength(), basicMessage + "\n", systemStyle);
                } catch (BadLocationException ex) {
                    logger.log(Level.SEVERE, "Cannot insert fallback file message", ex);
                }
            }
            
            tpChat.setCaretPosition(chatDocument.getLength());
        });
    }
    
    private JPanel createClickableFileContainer(String filename, String fileType, String fileDetails, boolean isSentByMe, int width) {
        // Tạo giao diện file container
        JPanel container = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2.setColor(isSentByMe ? MY_MESSAGE_BG : OTHER_MESSAGE_BG);
                g2.fillRoundRect(0, 0, getWidth(), getHeight(), 16, 16);
                g2.dispose();
            }
        };
        container.setLayout(new BorderLayout(10, 5));
        container.setBorder(BorderFactory.createEmptyBorder(8, 8, 8, 8));
        container.setOpaque(false);
        
        // Sử dụng chiều rộng động dựa trên nửa khung chat
        container.setPreferredSize(new Dimension(width, 80));
        
        // Icon dựa trên loại file
        ImageIcon fileTypeIcon = getFileTypeIcon(fileType);
        JLabel iconLabel = new JLabel(fileTypeIcon);
        iconLabel.setPreferredSize(new Dimension(40, 40));
        
        // Thông tin file
        JPanel infoPanel = new JPanel(new BorderLayout(0, 3));
        infoPanel.setOpaque(false);
        
        JLabel nameLabel = new JLabel("<html><b>" + filename + "</b></html>");
        nameLabel.setFont(NORMAL_FONT);
        nameLabel.setForeground(isSentByMe ? Color.WHITE : Color.BLACK);
        
        JLabel detailsLabel = new JLabel(fileDetails);
        detailsLabel.setFont(SMALL_FONT);
        detailsLabel.setForeground(isSentByMe ? new Color(220, 220, 220) : SYSTEM_MESSAGE_COLOR);
        
        infoPanel.add(nameLabel, BorderLayout.NORTH);
        infoPanel.add(detailsLabel, BorderLayout.CENTER);
        
        // Panel chứa các nút hành động
        JPanel actionPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
        actionPanel.setOpaque(false);
        
        // Nút download
        JButton downloadBtn = new JButton("Tải xuống");
        downloadBtn.setFont(SMALL_FONT);
        downloadBtn.setBackground(isSentByMe ? new Color(255, 255, 255, 80) : ACCENT_COLOR);
        downloadBtn.setForeground(isSentByMe ? Color.WHITE : Color.WHITE);
        downloadBtn.setBorder(BorderFactory.createEmptyBorder(4, 8, 4, 8));
        downloadBtn.setFocusPainted(false);
        downloadBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        downloadBtn.addActionListener(e -> {
            downloadFile(filename);
        });
        
        // Nút mở file (hiển thị dựa vào loại file)
        JButton openBtn = null;
        if (fileType.equals("audio") || fileType.equals("video") || fileType.equals("image")) {
            String actionText = "";
            switch (fileType) {
                case "audio": actionText = "Nghe"; break;
                case "video": actionText = "Xem"; break;
                case "image": actionText = "Xem"; break;
            }
            
            openBtn = new JButton(actionText);
            openBtn.setFont(SMALL_FONT);
            openBtn.setBackground(isSentByMe ? new Color(255, 255, 255, 80) : SUCCESS_COLOR);
            openBtn.setForeground(isSentByMe ? Color.WHITE : Color.WHITE);
            openBtn.setBorder(BorderFactory.createEmptyBorder(4, 8, 4, 8));
            openBtn.setFocusPainted(false);
            openBtn.setCursor(new Cursor(Cursor.HAND_CURSOR));
            
            final String fileTypeForOpen = fileType;
            openBtn.addActionListener(e -> {
                openFile(filename, fileTypeForOpen);
            });
        }
        
        actionPanel.add(downloadBtn);
        if (openBtn != null) {
            actionPanel.add(openBtn);
        }
        
        infoPanel.add(actionPanel, BorderLayout.SOUTH);
        
        // Thêm các thành phần vào container
        container.add(iconLabel, BorderLayout.WEST);
        container.add(infoPanel, BorderLayout.CENTER);
        
        // Làm cho toàn bộ container có thể click để tải xuống
        container.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    downloadFile(filename);
                }
            }
            
            @Override
            public void mouseEntered(MouseEvent e) {
                container.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                container.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        return container;
    }

    private ImageIcon getFileTypeIcon(String fileType) {
        switch (fileType) {
            case "audio": return audioIcon;
            case "video": return videoIcon;
            case "image": return imageIcon;
            case "document": return documentIcon;
            default: return fileIcon;
        }
    }

    private void downloadFile(String filename) {
        try {
            // Hiển thị hộp thoại lưu file
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Lưu tệp");
            fileChooser.setSelectedFile(new File(filename));
            
            int userSelection = fileChooser.showSaveDialog(this);
            
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File targetFile = fileChooser.getSelectedFile();
                
                // Yêu cầu file từ server
                client.requestFile(filename, targetFile.getAbsolutePath());
                displaySystemMessage("Đang tải xuống file: " + filename);
            }
        } catch (Exception e) {
            showErrorMessage("Lỗi khi tải xuống file: " + e.getMessage());
            logger.log(Level.SEVERE, "Error downloading file", e);
        }
    }

    private void openFile(String filename, String fileType) {
        try {
            // Tải xuống file tạm thời trước
            File tempDir = new File(System.getProperty("java.io.tmpdir"));
            File tempFile = new File(tempDir, filename);
            
            // Kiểm tra nếu file đã tồn tại thì mở luôn
            if (tempFile.exists()) {
                openFileWithDefaultApp(tempFile, fileType);
            } else {
                // Nếu chưa tồn tại, yêu cầu từ server
                client.requestFile(filename, tempFile.getAbsolutePath());
                displaySystemMessage("Đang tải xuống và mở file: " + filename);
                
                // Cần thêm callback khi tải xong để mở file
                // Đoạn này có thể cần thêm vào ChatClient một callback function
            }
        } catch (Exception e) {
            showErrorMessage("Lỗi khi mở file: " + e.getMessage());
            logger.log(Level.SEVERE, "Error opening file", e);
        }
    }

    private void openFileWithDefaultApp(File file, String fileType) {
        try {
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(file);
            } else {
                displaySystemMessage("Không thể mở file tự động. File đã được tải về tại: " + file.getAbsolutePath());
            }
        } catch (Exception e) {
            showErrorMessage("Không thể mở file: " + e.getMessage());
            logger.log(Level.SEVERE, "Error opening file with default app", e);
        }
    }
    
    public void fileDownloadComplete(String fileName, String savePath) {
        SwingUtilities.invokeLater(() -> {
            displaySystemMessage("Đã tải xuống file: " + fileName + " vào " + savePath);
            // Có thể thêm logic để tự động mở file sau khi tải xuống nếu cần
        });
    }
    
    private String getFileExtensionMessage(String filename) {
        int lastDotIndex = filename.lastIndexOf('.');
        if (lastDotIndex > 0 && lastDotIndex < filename.length() - 1) {
            String extension = filename.substring(lastDotIndex + 1).toUpperCase();
            return "Định dạng: " + extension;
        }
        return "Không xác định định dạng file";
    }

    public static void main(String[] args) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        SwingUtilities.invokeLater(() -> new ChatClientGUI().setVisible(true));
    }
}
Apr 16, 2025 5:14:45 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 5:16:20 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 5:17:38 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 5:17:43 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 5:17:54 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestv
Apr 16, 2025 5:17:57 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 5:34:23 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 5:34:25 AM chatclient.ChatClient sendMessage
INFO: Message sent: asdasd
Apr 16, 2025 5:34:31 AM chatclient.ChatClient sendMessage
INFO: Message sent: dasdasd
Apr 16, 2025 5:34:32 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 16, 2025 5:34:33 AM chatclient.ChatClient sendMessage
INFO: Message sent: as
Apr 16, 2025 5:34:33 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 5:34:33 AM chatclient.ChatClient sendMessage
INFO: Message sent: aa
Apr 16, 2025 5:34:34 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 5:34:34 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 5:35:26 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7538.PNG
Apr 16, 2025 5:36:19 AM chatclient.ChatClient sendFile
INFO: File sent successfully: IMG_7538.PNG (906.93 KB)
Apr 16, 2025 5:37:52 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttestvv
Apr 16, 2025 5:38:14 AM chatclient.ChatClient sendMessage
INFO: Message sent: testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Apr 16, 2025 5:57:40 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 5:57:46 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 5:57:50 AM chatclient.ChatClient sendMessage
INFO: Message sent: test
Apr 16, 2025 6:01:19 AM chatclient.FileTransferHandler selectFile
INFO: Đã chọn file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7559.HEIC
Apr 16, 2025 6:04:28 AM chatclient.ChatClient sendFile
INFO: File sent successfully: IMG_7559.HEIC (1.32 MB)
Apr 16, 2025 6:04:48 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 6:21:16 AM chatclient.ChatClient connect
INFO: Connected to server localhost on port 12345 as Terry
Apr 16, 2025 6:21:22 AM chatclient.ChatClient sendMessage
INFO: Message sent: helo
Apr 16, 2025 6:22:19 AM chatclient.ChatClient sendMessage
INFO: Message sent: Trước phố xá bon chen đông người bước
Ngày, tháng, năm lại xa
Thấp thoáng hương thơm hôm nào nhắc 
Chuyện chúng ta đã qua
Bóng dáng ngây ngô anh đợi 
Chiều tàn đón em
Giờ đã chìm vào trong dĩ vãng

Ngồi mong anh đếm từng lời hứa, lạnh lùng vỡ, lạnh lùng vơi
Xa xăm kia chẳng còn rực rỡ, nhìn là nhớ mình người ơi
Cho anh được ngắm tháng năm êm đẹp một lần cuối thôi
Trước khi mọi thứ tan thành mây

Baby em quay đi rồi sao trời cứ thế biệt ly
Mắt ướt hoen đôi bờ mi chẳng nói thêm được câu gì
Cơn mưa rơi nhẹ tênh trên phố hoa, mang suy tư chạm vào nơi đôi ta
Đưa em vụt qua tháng năm đan tay mềm mặc cho anh còn đứng bơ vơ trông theo đường khuya vắng

Từng kỷ niệm nhạt màu hoá lời ca
Đã từng đẹp chuyện tình đôi chúng ta
Bao đêm trôi qua anh cứ nghĩ
Gió khẽ lay nơi khung trời chỉ mình anh lặng yên, ngân nga hát câu tình ngày xưa, ngỡ như lúc em vẫn còn đây.

Phút chốc yêu thương lặng thầm rụng rơi
Tiễn đưa em đi về phương trời mới
Đoạn đường quen khuya nay 
Loay hoay quanh phố mưa anh đi tìm

Vẫn giữ khi môi em cười thật tươi
Ấm êm dẫu cho hai ta ngược lối
Thời gian trôi qua, anh sẽ
Quên dần em thôi
Apr 16, 2025 6:37:26 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 6:43:46 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Terry
Apr 16, 2025 6:45:56 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:502)
	at chatclient.ChatClient.sendMessage(ChatClient.java:112)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1394)
	at chatclient.ChatClientGUI$$Lambda$32/1727004999.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 6:45:58 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:502)
	at chatclient.ChatClient.sendMessage(ChatClient.java:112)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1394)
	at chatclient.ChatClientGUI$$Lambda$32/1727004999.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 6:46:04 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:502)
	at chatclient.ChatClient.sendMessage(ChatClient.java:112)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1394)
	at chatclient.ChatClientGUI$$Lambda$32/1727004999.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 6:46:06 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:502)
	at chatclient.ChatClient.sendMessage(ChatClient.java:112)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1394)
	at chatclient.ChatClientGUI$$Lambda$32/1727004999.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 6:46:08 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:502)
	at chatclient.ChatClient.sendMessage(ChatClient.java:112)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1394)
	at chatclient.ChatClientGUI$$Lambda$32/1727004999.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 6:48:29 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 7:13:15 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Terry
Apr 16, 2025 7:13:16 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 7:13:16 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
WARNING: Failed to decrypt historical message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.decrypt(ChatClient.java:553)
	at chatclient.ChatClient$MessageReader.receiveAndDisplayChatHistory(ChatClient.java:403)
	at chatclient.ChatClient$MessageReader.run(ChatClient.java:309)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 7:13:16 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
WARNING: Failed to decrypt historical message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.decrypt(ChatClient.java:553)
	at chatclient.ChatClient$MessageReader.receiveAndDisplayChatHistory(ChatClient.java:403)
	at chatclient.ChatClient$MessageReader.run(ChatClient.java:309)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 7:51:31 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 7:51:34 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Terry
Apr 16, 2025 7:51:34 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 7:51:34 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
WARNING: Failed to decrypt historical message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.decrypt(ChatClient.java:553)
	at chatclient.ChatClient$MessageReader.receiveAndDisplayChatHistory(ChatClient.java:403)
	at chatclient.ChatClient$MessageReader.run(ChatClient.java:309)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 7:51:34 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
WARNING: Failed to decrypt historical message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.decrypt(ChatClient.java:553)
	at chatclient.ChatClient$MessageReader.receiveAndDisplayChatHistory(ChatClient.java:403)
	at chatclient.ChatClient$MessageReader.run(ChatClient.java:309)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 7:51:43 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.access$1800(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1347)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 7:51:46 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.lambda$createChatPanel$9(ChatClientGUI.java:1397)
	at chatclient.ChatClientGUI$$Lambda$32/867573094.actionPerformed(Unknown Source)
	at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)
	at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2346)
	at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)
	at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)
	at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.AWTEventMulticaster.mouseReleased(AWTEventMulticaster.java:289)
	at java.awt.Component.processMouseEvent(Component.java:6525)
	at javax.swing.JComponent.processMouseEvent(JComponent.java:3324)
	at java.awt.Component.processEvent(Component.java:6290)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4898)
	at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4533)
	at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4462)
	at java.awt.Container.dispatchEventImpl(Container.java:2278)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 7:52:05 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.access$1800(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1347)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 7:52:06 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.access$1800(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1347)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 9:01:16 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:01:17 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:01:23 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:01:24 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:01:25 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:01:28 AM chatclient.ChatClient$MessageReader run
WARNING: Failed to decrypt message from Thuong
Apr 16, 2025 9:07:04 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.access$1800(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1347)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 9:07:07 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 9:51:54 AM chatclient.LoginRegisterManager login
WARNING: Login failed for user: Terry
Apr 16, 2025 9:52:10 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 9:52:10 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 9:52:10 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 9:52:13 AM chatclient.ChatClient sendMessage
INFO: Message sent: hi
Apr 16, 2025 9:52:27 AM chatclient.ChatClient sendMessage
INFO: Message sent: asdasd
Apr 16, 2025 9:52:28 AM chatclient.ChatClient sendMessage
INFO: Message sent: hi
Apr 16, 2025 9:53:30 AM chatclient.ChatClient sendMessage
INFO: Message sent: hsfsdf
Apr 16, 2025 9:54:15 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 9:55:54 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 9:55:54 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 9:55:54 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 9:55:56 AM chatclient.ChatClient forceLogin
INFO: Force login sent to server
Apr 16, 2025 9:55:56 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 9:55:59 AM chatclient.ChatClient sendMessage
INFO: Message sent: helo
Apr 16, 2025 9:56:04 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:04:18 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:04:18 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:04:18 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:04:20 AM chatclient.ChatClient forceLogin
INFO: Force login sent to server
Apr 16, 2025 10:04:20 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:04:21 AM chatclient.ChatClient sendMessage
INFO: Message sent: he
Apr 16, 2025 10:05:35 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:05:55 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:05:55 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:05:56 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:05:57 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 16, 2025 10:05:59 AM chatclient.ChatClient sendMessage
INFO: Message sent: helo
Apr 16, 2025 10:09:36 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:16:46 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:16:46 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:16:46 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:16:48 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 16, 2025 10:16:49 AM chatclient.ChatClient sendMessage
INFO: Message sent: \
Apr 16, 2025 10:16:49 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 10:16:50 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 10:16:50 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 10:16:50 AM chatclient.ChatClient sendMessage
INFO: Message sent: a
Apr 16, 2025 10:16:53 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:20:56 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:20:56 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:20:57 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.access$1700(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1344)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 10:21:18 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.access$1700(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1344)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 10:21:43 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:22:10 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:22:10 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:22:10 AM chatclient.ChatClient sendMessage
INFO: Sent special command: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:22:15 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1650)
	at chatclient.ChatClientGUI.access$1800(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1347)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 10:24:09 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:24:54 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:24:54 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:24:57 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1615)
	at chatclient.ChatClientGUI.access$1700(ChatClientGUI.java:21)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1321)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 10:25:59 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:26:11 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:26:11 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:26:13 AM chatclient.ChatClient sendMessage
SEVERE: Error sending message
java.security.InvalidKeyException: Illegal key size or default parameters
	at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1026)
	at javax.crypto.Cipher.implInit(Cipher.java:801)
	at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
	at javax.crypto.Cipher.init(Cipher.java:1249)
	at javax.crypto.Cipher.init(Cipher.java:1186)
	at chatclient.ChatClient$SimpleCipher.encrypt(ChatClient.java:545)
	at chatclient.ChatClient.sendMessage(ChatClient.java:114)
	at chatclient.ChatClientGUI.sendMessage(ChatClientGUI.java:1638)
	at chatclient.ChatClientGUI.access$1700(ChatClientGUI.java:24)
	at chatclient.ChatClientGUI$10.keyPressed(ChatClientGUI.java:1344)
	at java.awt.Component.processKeyEvent(Component.java:6483)
	at javax.swing.JComponent.processKeyEvent(JComponent.java:2832)
	at java.awt.Component.processEvent(Component.java:6302)
	at java.awt.Container.processEvent(Container.java:2234)
	at java.awt.Component.dispatchEventImpl(Component.java:4881)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1954)
	at java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:806)
	at java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1074)
	at java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:945)
	at java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:771)
	at java.awt.Component.dispatchEventImpl(Component.java:4752)
	at java.awt.Container.dispatchEventImpl(Container.java:2292)
	at java.awt.Window.dispatchEventImpl(Window.java:2750)
	at java.awt.Component.dispatchEvent(Component.java:4703)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)
	at java.awt.EventQueue.access$500(EventQueue.java:97)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.awt.EventQueue$3.run(EventQueue.java:703)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:86)
	at java.awt.EventQueue$4.run(EventQueue.java:731)
	at java.awt.EventQueue$4.run(EventQueue.java:729)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:728)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)

Apr 16, 2025 10:28:08 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 10:46:06 AM chatclient.LoginRegisterManager login
WARNING: Login attempt with non-existent username: Thương
Apr 16, 2025 10:46:16 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:46:19 AM chatclient.ChatClient connect
SEVERE: Could not connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:77)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:850)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:847)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 10:46:29 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 10:46:29 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 10:46:29 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 10:46:31 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 16, 2025 11:10:43 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 11:10:44 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 11:10:44 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 11:10:46 AM chatclient.ChatClient sendMessage
INFO: Message sent: heelo
Apr 16, 2025 11:12:44 AM chatclient.ChatClient sendMessage
INFO: Message sent: asd
Apr 16, 2025 3:09:22 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:09:41 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Viet
Apr 16, 2025 3:09:41 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Viet
Apr 16, 2025 3:09:41 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 3:09:44 PM chatclient.ChatClient sendMessage
INFO: Message sent: Viet: hello
Apr 16, 2025 3:16:05 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 3:22:07 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 3:22:07 PM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 16, 2025 3:22:07 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 3:22:07 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 3:27:44 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 3:27:44 PM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 16, 2025 3:27:44 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 3:27:44 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 3:29:32 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 3:29:32 PM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 16, 2025 3:29:32 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 3:29:32 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 7:00:28 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 7:00:30 PM chatclient.ChatClient connect
SEVERE: Could not connect to server
java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:211)
	at chatclient.ChatClient.connect(ChatClient.java:78)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:848)
	at chatclient.ChatClientGUI$4.doInBackground(ChatClientGUI.java:845)
	at javax.swing.SwingWorker$1.call(SwingWorker.java:295)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at javax.swing.SwingWorker.run(SwingWorker.java:334)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 7:00:41 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 7:00:41 PM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 16, 2025 7:00:41 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 7:00:41 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 7:00:41 PM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 16, 2025 7:00:45 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: helo
Apr 16, 2025 7:00:53 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asdasd
Apr 16, 2025 7:00:54 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asd
Apr 16, 2025 7:00:54 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: a
Apr 16, 2025 7:00:55 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: a
Apr 16, 2025 7:05:30 PM chatclient.FileTransferHandler selectFile
INFO: Selected file: D:\Ảnh\PickTuresOfTerry\AP\IMG_7980.PNG
Apr 16, 2025 7:05:30 PM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: IMG_7980.PNG
Apr 16, 2025 7:05:31 PM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:IMG_7980.PNG:1464749:image
Apr 16, 2025 9:11:41 PM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 16, 2025 9:11:41 PM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:202)
	at java.lang.Thread.run(Thread.java:745)

Apr 16, 2025 11:58:42 PM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 16, 2025 11:58:42 PM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 16, 2025 11:58:42 PM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 16, 2025 11:58:42 PM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 16, 2025 11:58:42 PM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 5 messages
Apr 16, 2025 11:58:46 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: helo
Apr 16, 2025 11:58:50 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asdsadasd
Apr 16, 2025 11:58:51 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: aa
Apr 16, 2025 11:58:51 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: aa
Apr 16, 2025 11:58:52 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: aa
Apr 16, 2025 11:58:52 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: a
Apr 16, 2025 11:58:52 PM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: a
Apr 17, 2025 12:04:08 AM chatclient.FileTransferHandler selectFile
INFO: Selected file: D:\Ảnh\PickTuresOfTerry\AP\IMG_0062.HEIC
Apr 17, 2025 12:04:08 AM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: IMG_0062.HEIC
Apr 17, 2025 12:04:09 AM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:IMG_0062.HEIC:967810:other
Apr 17, 2025 12:04:22 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 12:04:22 AM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:202)
	at java.lang.Thread.run(Thread.java:745)

Apr 17, 2025 5:34:22 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:34:22 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:34:22 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:34:22 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:34:22 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 14 messages
Apr 17, 2025 5:34:37 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: tôi chưa kết thua
Apr 17, 2025 5:34:39 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asddddddddddddddddddddd
Apr 17, 2025 5:34:43 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
Apr 17, 2025 5:34:52 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Apr 17, 2025 5:35:12 AM chatclient.FileTransferHandler selectFile
INFO: Selected file: D:\Ảnh\PickTuresOfTerry\AP\IMG_6846.HEIC
Apr 17, 2025 5:35:12 AM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: IMG_6846.HEIC
Apr 17, 2025 5:35:12 AM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:IMG_6846.HEIC:254434:other:248.5 KB
Apr 17, 2025 5:35:17 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 5:35:17 AM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:231)
	at java.lang.Thread.run(Thread.java:745)

Apr 17, 2025 5:38:03 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:38:03 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:38:03 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:38:03 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:38:03 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 18 messages
Apr 17, 2025 5:38:11 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asdasdas
Apr 17, 2025 5:39:45 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 5:39:46 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:39:46 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:39:46 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:39:46 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:39:46 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 19 messages
Apr 17, 2025 5:39:55 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Apr 17, 2025 5:42:07 AM chatclient.FileTransferHandler selectFile
INFO: Selected file: D:\Ảnh\PickTuresOfTerry\AP\BFEY1978.JPG
Apr 17, 2025 5:42:07 AM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: BFEY1978.JPG
Apr 17, 2025 5:42:07 AM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:BFEY1978.JPG:72793:image:71.1 KB
Apr 17, 2025 5:46:26 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 5:46:26 AM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:231)
	at java.lang.Thread.run(Thread.java:745)

Apr 17, 2025 5:51:55 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:51:55 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:51:55 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:51:55 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:51:55 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 17, 2025 5:53:05 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 5:53:05 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:53:05 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:53:05 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:53:05 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:53:05 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 17, 2025 5:53:10 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 5:53:17 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 5:53:17 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 5:53:17 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 5:53:17 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 5:53:17 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 17, 2025 5:53:26 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 6:12:52 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 6:12:52 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 6:12:52 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 6:12:52 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 6:12:52 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 17, 2025 6:12:58 AM chatclient.FileTransferHandler selectFile
INFO: Selected file: C:\Users\Terrykote\Downloads\Lab8.pdf
Apr 17, 2025 6:12:58 AM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: Lab8.pdf
Apr 17, 2025 6:12:58 AM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:Lab8.pdf:383982:document:375.0 KB
Apr 17, 2025 6:13:09 AM chatclient.ChatClient sendMessage
INFO: Message sent: sdasd
Apr 17, 2025 6:13:10 AM chatclient.ChatClient sendMessage
INFO: Message sent: asdsad
Apr 17, 2025 6:13:13 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 6:13:13 AM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:231)
	at java.lang.Thread.run(Thread.java:745)

Apr 17, 2025 7:02:25 AM chatclient.LoginRegisterManager login
INFO: Login successful for user: Thuong
Apr 17, 2025 7:02:25 AM chatclient.ChatClient requestOnlineUsers
INFO: Requested online users list
Apr 17, 2025 7:02:25 AM chatclient.ChatClient connect
INFO: Connected to server: localhost:12345 as Thuong
Apr 17, 2025 7:02:25 AM chatclient.ChatClient sendMessage
INFO: Message sent: REQUEST_CHAT_HISTORY
Apr 17, 2025 7:02:25 AM chatclient.ChatClient$MessageReader receiveAndDisplayChatHistory
INFO: Received chat history with 0 messages
Apr 17, 2025 7:02:29 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asdsadas
Apr 17, 2025 7:02:29 AM chatclient.ChatClient sendMessage
INFO: Message sent: Thuong: asd
Apr 17, 2025 7:02:42 AM chatclient.FileTransferHandler selectFile
INFO: Selected file: C:\Users\Terrykote\OneDrive\Documents\test.docx
Apr 17, 2025 7:02:42 AM chatclient.ChatClient sendFile
INFO: Added file to transfer queue: test.docx
Apr 17, 2025 7:02:42 AM chatclient.ChatClient$FileTransferProcessor run
INFO: Sent file header: FILE_HEADER:test.docx:13503:document:13.2 KB
Apr 17, 2025 7:03:05 AM chatclient.ChatClient disconnect
INFO: Disconnected from server
Apr 17, 2025 7:03:05 AM chatclient.ChatClient$FileTransferProcessor run
SEVERE: Error initiating file transfer
java.net.SocketException: socket closed
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)
	at java.net.SocketInputStream.read(SocketInputStream.java:170)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at chatclient.ChatClient$FileTransferProcessor.run(ChatClient.java:231)
	at java.lang.Thread.run(Thread.java:745)

